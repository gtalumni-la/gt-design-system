name: CI (Simplified with Reusable Workflows)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      node-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  # Job 2: Commit message validation (PR only)
  commitlint:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate current commit (PR title)
        run: echo "${{ github.event.pull_request.title }}" | npx commitlint
        env:
          INPUT_CONFIGFILE: commitlint.config.js

      - name: Validate all commits in PR
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to HEAD --verbose

  # Job 3: All quality checks using reusable workflow
  quality-checks:
    name: Quality Checks
    needs: setup
    uses: ./.github/workflows/quality-checks.yml
    secrets: inherit
    with:
      node-version: '20'
      fail-fast: false # Run all checks to get complete picture

  changesets:
    name: Check for Changesets
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for changesets and version
        run: pnpm changeset status --since=main --verbose

  # Job 4: Multi-node testing (existing pattern)
  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    needs: [setup, quality-checks]
    if: needs.quality-checks.outputs.build-result == 'success'
    strategy:
      matrix:
        node-version: [18, 20, 22, 24]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: pnpm test:ci

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '18' # Only upload once
        with:
          name: coverage-reports
          path: |
            packages/*/coverage/
            coverage-summary.md

  # Job 5: Security audit (can run in parallel)

  # Job 6: Final quality gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [quality-checks, test-matrix]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "## CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Matrix Tests | ${{ needs.test-matrix.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.quality-checks.result }}" == "failure" || "${{ needs.test-matrix.result }}" == "failure" ]]; then
            echo "‚ùå CI failed - please check the logs"
            exit 1
          fi

          echo "‚úÖ All CI checks passed!"

  # Job 7: PR comment with results
  comment-pr:
    name: Comment PR Results
    runs-on: ubuntu-latest
    needs: [quality-checks, test-matrix]
    if: github.event_name == 'pull_request' && always()
    permissions:
      pull-requests: write
    steps:
      - name: Generate PR comment
        run: |
          cat > pr-comment.md << EOF
          ## üîç CI/CD Results

          | Check | Status |
          |-------|--------|
          | üîç Quality Checks | ${{ needs.quality-checks.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | üß™ Multi-Node Tests | ${{ needs.test-matrix.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | üîí Security | ${{ needs.quality-checks.outputs.security-status == 'clean' && '‚úÖ Clean' || '‚ö†Ô∏è Issues tracked' }} |

          ### Quality Checks Breakdown
          - **Linting**: ${{ needs.quality-checks.outputs.lint-result == 'success' && '‚úÖ' || '‚ùå' }}
          - **Type Check**: ${{ needs.quality-checks.outputs.type-check-result == 'success' && '‚úÖ' || '‚ùå' }}
          - **Build**: ${{ needs.quality-checks.outputs.build-result == 'success' && '‚úÖ' || '‚ùå' }}
          - **Tests**: ${{ needs.quality-checks.outputs.test-result == 'success' && '‚úÖ' || '‚ùå' }}
          - **Accessibility**: ${{ needs.quality-checks.outputs.accessibility-result == 'success' && '‚úÖ' || '‚ùå' }}
          - **Security**: ${{ needs.quality-checks.outputs.security-result == 'success' && '‚úÖ' || '‚ùå' }}
          EOF

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('pr-comment.md', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('üîç CI/CD Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
