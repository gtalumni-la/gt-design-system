name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  # Job 1: Install dependencies and cache
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      node-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  # Job 2: Commit Message Validation (PR only)
  commitlint:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate current commit (PR title)
        run: echo "${{ github.event.pull_request.title }}" | npx commitlint
        env:
          INPUT_CONFIGFILE: commitlint.config.js

      - name: Validate all commits in PR
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to HEAD --verbose

  # Job 3: Linting and Code Quality
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: Run ESLint (for annotations)
        run: pnpm lint

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json

  # Job 4: Build
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: build-${{ github.sha }}

  # Job 4: Type Checking
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore build outputs
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: build-${{ github.sha }}

      - name: Run TypeScript type checking
        run: pnpm type-check

  # Job 6: Accessibility Testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [setup, build]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }}

      - name: Restore build outputs
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: build-${{ github.sha }}

      - name: Run accessibility tests
        run: pnpm test a11y

      - name: Build Storybook for accessibility audit
        run: pnpm build --filter @gtalumni-la/storybook

      - name: Install axe-core CLI
        run: npm install -g @axe-core/cli

      - name: Run cross-browser Storybook accessibility audit
        run: |
          # Start a simple HTTP server for Storybook
          cd apps/storybook/storybook-static
          python3 -m http.server 8080 &
          SERVER_PID=$!
          sleep 5
          
          # Run axe tests with different browsers
          case "${{ matrix.browser }}" in
            "chromium")
              axe http://localhost:8080 --chrome-options="--no-sandbox,--disable-dev-shm-usage" --tags wcag2a,wcag2aa --reporter json > ../../../storybook-a11y-${{ matrix.browser }}.json || true
              ;;
            "firefox")
              axe http://localhost:8080 --browser firefox --tags wcag2a,wcag2aa --reporter json > ../../../storybook-a11y-${{ matrix.browser }}.json || true
              ;;
            "webkit")
              # WebKit testing with Playwright
              cd packages/react
              npx playwright test --config=playwright-a11y.config.js --project webkit || true
              cd ../..
              ;;
          esac
          
          # Kill the server
          kill $SERVER_PID
          
      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-reports-${{ matrix.browser }}
          path: |
            storybook-a11y-${{ matrix.browser }}.json
            packages/*/coverage/
            playwright-report/
          retention-days: 7

  # Job 7: Testing with Coverage
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    needs: [setup, build]
    strategy:
      matrix:
        node-version: [18, 20, 22, 24]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore build outputs
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: build-${{ github.sha }}

      - name: Run tests with coverage
        run: pnpm test:ci

      - name: Generate coverage reports
        run: |
          # Generate coverage summary for each package
          find packages -name "coverage" -type d | while read dir; do
            package_name=$(basename $(dirname $dir))
            echo "## Coverage for $package_name" >> coverage-summary.md
            if [ -f "$dir/coverage-summary.json" ]; then
              cat "$dir/coverage-summary.json" >> coverage-summary.md
            fi
            echo "" >> coverage-summary.md
          done

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '18' # Only upload once
        with:
          name: coverage-reports
          path: |
            packages/*/coverage/
            coverage-summary.md

      - name: Upload coverage to Codecov
        if: matrix.node-version == '18' # Only upload once
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./packages
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 7: Package Audits
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Check for outdated dependencies
        run: pnpm outdated
        continue-on-error: true

  # Job 9: Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build, accessibility, test]
    if: always()
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "❌ Linting failed"
            exit 1
          fi
          if [[ "${{ needs.typecheck.result }}" == "failure" ]]; then
            echo "❌ Type checking failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          if [[ "${{ needs.accessibility.result }}" == "failure" ]]; then
            echo "❌ Accessibility tests failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          echo "✅ All quality checks passed!"

  # Job 10: Comment PR with Results
  comment-pr:
    name: Comment PR Results
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build, accessibility, test, audit]
    if: github.event_name == 'pull_request' && always()
    permissions:
      pull-requests: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate PR comment
        id: pr-comment
        run: |
          # Create PR comment with results
          cat > pr-comment.md << EOF
          ## 🔍 CI/CD Results

          | Check | Status |
          |-------|--------|
          | 🔍 Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | 🏗️ Type Check | ${{ needs.typecheck.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | 📦 Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | ♿ Accessibility | ${{ needs.accessibility.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | 🧪 Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | 🔒 Security Audit | ${{ needs.audit.result == 'success' && '✅ Passed' || '⚠️ Check logs' }} |

          ### Test Coverage
          Coverage reports are available in the artifacts.

          ### Accessibility Reports
          Accessibility testing reports (including Storybook audits) are available in the artifacts.

          ### Next Steps
          EOF

          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.typecheck.result }}" == "failure" || "${{ needs.build.result }}" == "failure" || "${{ needs.accessibility.result }}" == "failure" || "${{ needs.test.result }}" == "failure" ]]; then
            echo "❌ This PR has failing checks. Please review the errors and fix them before merging." >> pr-comment.md
          else
            echo "✅ All checks passed! This PR is ready for review." >> pr-comment.md
          fi

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('pr-comment.md', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🔍 CI/CD Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  # Job 11: Storybook Build
  storybook:
    name: Build Storybook
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore build outputs
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: build-${{ github.sha }}

      - name: Build Storybook
        run: pnpm build --filter @gtalumni-la/storybook

      - name: Upload Storybook artifacts
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: apps/storybook/storybook-static/
          retention-days: 7
