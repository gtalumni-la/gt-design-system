name: Deploy Documentation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build design tokens
        run: pnpm --filter @gtalumni-la/tokens build

      - name: Build React components
        run: pnpm --filter @gtalumni-la/react build

      - name: Build Storybook
        run: pnpm --filter @gtalumni-la/storybook build
        env:
          GITHUB_PAGES: true

      - name: Build VitePress documentation
        run: pnpm --filter @gtalumni-la/docs build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Get current version
        id: version
        run: |
          VERSION="v$(node -p "require('./package.json').version")"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying latest version: $VERSION"

      - name: Prepare deployment directory
        run: |
          mkdir -p dist
          
          # Copy VitePress build (main site)
          cp -r apps/docs/.vitepress/dist/* dist/
          
          # Copy Storybook build
          if [ -d "apps/storybook/storybook-static" ]; then
            mkdir -p dist/storybook
            cp -r apps/storybook/storybook-static/* dist/storybook/
          else
            echo "Error: Storybook build not found at apps/storybook/storybook-static. Check if the Storybook build step completed successfully."
            exit 1
          fi
          
          # Fetch available versions from gh-pages branch (if it exists)
          # This will help populate the version switcher
          if git ls-remote --exit-code --heads origin gh-pages > /dev/null 2>&1; then
            echo "Fetching version information from gh-pages branch..."
            git fetch origin gh-pages:gh-pages 2>/dev/null || true
            if git show gh-pages:versions.json > /dev/null 2>&1; then
              git show gh-pages:versions.json > dist/versions.json 2>/dev/null || echo '{"current": {"version": "${{ steps.version.outputs.version }}", "path": "/", "label": "${{ steps.version.outputs.version }} (latest)"}, "versions": []}' > dist/versions.json
            else
              echo '{"current": {"version": "${{ steps.version.outputs.version }}", "path": "/", "label": "${{ steps.version.outputs.version }} (latest)"}, "versions": []}' > dist/versions.json
            fi
          else
            echo "No gh-pages branch found, creating default versions.json"
            echo '{"current": {"version": "${{ steps.version.outputs.version }}", "path": "/", "label": "${{ steps.version.outputs.version }} (latest)"}, "versions": []}' > dist/versions.json
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  # Deployment job
  deploy:
    # Deploy on main branch only (latest version)
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const baseUrl = '${{ steps.deployment.outputs.page_url }}';
            const previewUrl = `${baseUrl}pr-preview/${prNumber}/`;
            const storybookUrl = `${previewUrl}storybook/`;

            const comment = `ðŸš€ Preview deployment is ready!

            - Documentation: ${previewUrl}
            - Storybook: ${storybookUrl}`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
