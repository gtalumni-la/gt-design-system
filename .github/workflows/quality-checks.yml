name: Quality Checks (Reusable)

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'

      skip-accessibility:
        description: 'Skip accessibility tests'
        required: false
        type: boolean
        default: false

      skip-security-audit:
        description: 'Skip security audit'
        required: false
        type: boolean
        default: false

      fail-fast:
        description: 'Fail immediately on first error'
        required: false
        type: boolean
        default: true

    outputs:
      lint-result:
        description: 'ESLint check result'
        value: ${{ jobs.quality-checks.outputs.lint-result }}

      type-check-result:
        description: 'TypeScript type check result'
        value: ${{ jobs.quality-checks.outputs.type-check-result }}

      build-result:
        description: 'Build result'
        value: ${{ jobs.quality-checks.outputs.build-result }}

      test-result:
        description: 'Test result'
        value: ${{ jobs.quality-checks.outputs.test-result }}

      accessibility-result:
        description: 'Accessibility test result'
        value: ${{ jobs.quality-checks.outputs.accessibility-result }}

      security-result:
        description: 'Security audit result'
        value: ${{ jobs.quality-checks.outputs.security-result }}

      security-status:
        description: 'Security audit status'
        value: ${{ jobs.quality-checks.outputs.security-status }}

      audit-results:
        description: 'Security audit details'
        value: ${{ jobs.quality-checks.outputs.audit-results }}

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    outputs:
      lint-result: ${{ steps.quality-check.outputs.lint-result }}
      type-check-result: ${{ steps.quality-check.outputs.type-check-result }}
      build-result: ${{ steps.quality-check.outputs.build-result }}
      test-result: ${{ steps.quality-check.outputs.test-result }}
      accessibility-result: ${{ steps.quality-check.outputs.accessibility-result }}
      security-result: ${{ steps.quality-check.outputs.security-result }}
      security-status: ${{ steps.quality-check.outputs.security-status }}
      audit-results: ${{ steps.quality-check.outputs.audit-results }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Quality Checks
        id: quality-check
        uses: ./.github/actions/quality-checks
        with:
          node-version: ${{ inputs.node-version }}
          skip-accessibility: ${{ inputs.skip-accessibility }}
          skip-security-audit: ${{ inputs.skip-security-audit }}
          fail-fast: ${{ inputs.fail-fast }}

      - name: Create Security Issue
        if: steps.quality-check.outputs.security-status == 'vulnerabilities-found'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const auditResults = `${{ steps.quality-check.outputs.audit-results }}`;
            const currentDate = new Date().toISOString().split('T')[0];

            // Check if there's already an open security issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,dependencies',
              state: 'open'
            });

            if (issues.length > 0) {
              // Update existing issue
              const existingIssue = issues[0];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## 🔒 Updated Security Audit Results - ${currentDate}

            New security vulnerabilities detected in CI:

            \`\`\`
            ${auditResults}
            \`\`\`

            **Action Required**: Please review and update the affected dependencies.

            **Suggested Fix**: Run \`pnpm audit --fix\` to automatically resolve these issues.

            _This comment was automatically generated by the CI security audit._`
              });

              console.log(`Updated existing security issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔒 Security Vulnerabilities Detected - ${currentDate}`,
                labels: ['security', 'dependencies', 'automated'],
                body: `## 🛡️ Security Audit Results

            The automated security audit has detected vulnerabilities in our dependencies:

            \`\`\`
            ${auditResults}
            \`\`\`

            ## 🔧 Recommended Actions

            1. **Review the vulnerabilities** listed above
            2. **Update affected dependencies**:
               \`\`\`bash
               pnpm audit --fix
               \`\`\`
            3. **Test the application** to ensure updates don't break functionality
            4. **Commit the security fixes**

            ## 📋 Additional Information

            - **Detection Date**: ${currentDate}
            - **Audit Level**: Moderate and above
            - **CI Run**: [${context.workflow}](${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

            This issue will be automatically updated if new vulnerabilities are detected.

            _This issue was automatically created by the CI security audit._`
              });

              console.log(`Created new security issue #${issue.number}`);
            }
