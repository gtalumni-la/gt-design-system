import{_ as n,c as a,o as e,ag as l}from"./chunks/framework.1_C1QafT.js";const b=JSON.parse('{"title":"Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"development/architecture.md","filePath":"development/architecture.md","lastUpdated":1756450230000}'),o={name:"development/architecture.md"};function p(t,s,r,i,c,u){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h1><p>This document outlines the architecture and design decisions behind the GT Design System, providing insights for contributors and maintainers.</p><h2 id="system-overview" tabindex="-1">System Overview <a class="header-anchor" href="#system-overview" aria-label="Permalink to &quot;System Overview&quot;">​</a></h2><p>The GT Design System follows atomic design principles and is structured as a monorepo containing design tokens, React components, and supporting packages.</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>gt-design-system/</span></span>
<span class="line"><span>├── packages/</span></span>
<span class="line"><span>│   ├── tokens/           # Design tokens (Style Dictionary)</span></span>
<span class="line"><span>│   ├── react/            # React components</span></span>
<span class="line"><span>│   ├── eslint/           # ESLint configurations</span></span>
<span class="line"><span>│   └── typescript/       # TypeScript configurations</span></span>
<span class="line"><span>├── apps/</span></span>
<span class="line"><span>│   ├── docs/             # VitePress documentation</span></span>
<span class="line"><span>│   └── storybook/        # Component playground</span></span>
<span class="line"><span>└── tools/                # Build and development tools</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="design-principles" tabindex="-1">Design Principles <a class="header-anchor" href="#design-principles" aria-label="Permalink to &quot;Design Principles&quot;">​</a></h2><h3 id="_1-token-driven-design" tabindex="-1">1. Token-Driven Design <a class="header-anchor" href="#_1-token-driven-design" aria-label="Permalink to &quot;1. Token-Driven Design&quot;">​</a></h3><p>All visual properties stem from design tokens, ensuring consistency and maintainability.</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Components use tokens, not hard-coded values</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> buttonStyles</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  backgroundColor: GtColorPrimaryGold,</span></span>
<span class="line"><span style="color:#E1E4E8;">  padding: </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">GtSpacing3</span><span style="color:#9ECBFF;">} \${</span><span style="color:#E1E4E8;">GtSpacing6</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  borderRadius: GtBorderRadiusBase,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-component-composition" tabindex="-1">2. Component Composition <a class="header-anchor" href="#_2-component-composition" aria-label="Permalink to &quot;2. Component Composition&quot;">​</a></h3><p>Components are designed to be composable and flexible:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Base component with extensible props</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ButtonProps</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ButtonHTMLAttributes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HTMLButtonElement</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">  variant</span><span style="color:#F97583;">?:</span><span style="color:#9ECBFF;"> &#39;primary&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;secondary&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;outline&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  size</span><span style="color:#F97583;">?:</span><span style="color:#9ECBFF;"> &#39;sm&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;md&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;lg&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-progressive-enhancement" tabindex="-1">3. Progressive Enhancement <a class="header-anchor" href="#_3-progressive-enhancement" aria-label="Permalink to &quot;3. Progressive Enhancement&quot;">​</a></h3><p>Components work without JavaScript and enhance with interactivity:</p><ul><li>Semantic HTML foundation</li><li>CSS-only base styling</li><li>JavaScript for enhanced behavior</li></ul><h2 id="package-architecture" tabindex="-1">Package Architecture <a class="header-anchor" href="#package-architecture" aria-label="Permalink to &quot;Package Architecture&quot;">​</a></h2><h3 id="design-tokens-gtalumni-la-tokens" tabindex="-1">Design Tokens (<code>@gtalumni-la/tokens</code>) <a class="header-anchor" href="#design-tokens-gtalumni-la-tokens" aria-label="Permalink to &quot;Design Tokens (\`@gtalumni-la/tokens\`)&quot;">​</a></h3><p><strong>Technology Stack:</strong></p><ul><li>Style Dictionary for token generation</li><li>JSON source files for token definitions</li><li>Multiple output formats (CSS, SCSS, JS, TS, JSON)</li></ul><p><strong>Structure:</strong></p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>packages/tokens/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── tokens.ts         # Generated TypeScript exports</span></span>
<span class="line"><span>│   └── tokens.d.ts       # Type definitions</span></span>
<span class="line"><span>├── tokens/               # Source JSON files</span></span>
<span class="line"><span>│   ├── colors.json</span></span>
<span class="line"><span>│   ├── spacing.json</span></span>
<span class="line"><span>│   └── typography.json</span></span>
<span class="line"><span>├── dist/                 # Generated outputs</span></span>
<span class="line"><span>│   ├── css/</span></span>
<span class="line"><span>│   ├── scss/</span></span>
<span class="line"><span>│   ├── js/</span></span>
<span class="line"><span>│   ├── ts/</span></span>
<span class="line"><span>│   └── json/</span></span>
<span class="line"><span>└── config.js            # Style Dictionary configuration</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>Token Generation Flow:</strong></p><ol><li>JSON source files define raw token values</li><li>Style Dictionary processes and transforms tokens</li><li>Multiple format outputs generated automatically</li><li>TypeScript types generated for type safety</li></ol><h3 id="react-components-gtalumni-la-react" tabindex="-1">React Components (<code>@gtalumni-la/react</code>) <a class="header-anchor" href="#react-components-gtalumni-la-react" aria-label="Permalink to &quot;React Components (\`@gtalumni-la/react\`)&quot;">​</a></h3><p><strong>Technology Stack:</strong></p><ul><li>React 18+ with TypeScript</li><li>Rollup for bundling</li><li>Vitest for testing</li><li>ESLint and Prettier for code quality</li></ul><p><strong>Structure:</strong></p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>packages/react/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── Button.tsx        # Component implementation</span></span>
<span class="line"><span>│   ├── Button.stories.tsx # Storybook stories</span></span>
<span class="line"><span>│   ├── __test__/         # Component tests</span></span>
<span class="line"><span>│   └── index.ts          # Package exports</span></span>
<span class="line"><span>├── dist/                 # Built outputs</span></span>
<span class="line"><span>└── rollup.config.js      # Build configuration</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>Component Design Patterns:</strong></p><ul><li>Compound components for complex UI</li><li>Render props for flexible composition</li><li>Forward refs for DOM access</li><li>Generic types for reusable patterns</li></ul><h2 id="build-system" tabindex="-1">Build System <a class="header-anchor" href="#build-system" aria-label="Permalink to &quot;Build System&quot;">​</a></h2><h3 id="monorepo-management" tabindex="-1">Monorepo Management <a class="header-anchor" href="#monorepo-management" aria-label="Permalink to &quot;Monorepo Management&quot;">​</a></h3><p><strong>Turborepo</strong> orchestrates builds across packages:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;pipeline&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;build&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;dependsOn&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;^build&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;outputs&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;dist/**&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;test&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;dependsOn&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>Benefits:</strong></p><ul><li>Intelligent caching of build outputs</li><li>Parallel execution of independent tasks</li><li>Dependency-aware build ordering</li><li>Remote caching for CI/CD</li></ul><h3 id="package-bundling" tabindex="-1">Package Bundling <a class="header-anchor" href="#package-bundling" aria-label="Permalink to &quot;Package Bundling&quot;">​</a></h3><p><strong>Rollup Configuration:</strong></p><ul><li>ES modules and CommonJS outputs</li><li>TypeScript compilation</li><li>Tree-shaking optimization</li><li>Source map generation</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.ts&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    { file: </span><span style="color:#9ECBFF;">&#39;dist/index.esm.js&#39;</span><span style="color:#E1E4E8;">, format: </span><span style="color:#9ECBFF;">&#39;es&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { file: </span><span style="color:#9ECBFF;">&#39;dist/index.cjs.js&#39;</span><span style="color:#E1E4E8;">, format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  external: [</span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;react-dom&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span><span style="color:#B392F0;">typescript</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">commonjs</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="type-safety" tabindex="-1">Type Safety <a class="header-anchor" href="#type-safety" aria-label="Permalink to &quot;Type Safety&quot;">​</a></h2><h3 id="design-token-types" tabindex="-1">Design Token Types <a class="header-anchor" href="#design-token-types" aria-label="Permalink to &quot;Design Token Types&quot;">​</a></h3><p>Tokens are strongly typed for better developer experience:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Generated types from Style Dictionary</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> GTColorKey</span><span style="color:#F97583;"> =</span></span>
<span class="line"><span style="color:#F97583;">  |</span><span style="color:#9ECBFF;"> &#39;GT_COLOR_PRIMARY_GOLD&#39;</span></span>
<span class="line"><span style="color:#F97583;">  |</span><span style="color:#9ECBFF;"> &#39;GT_COLOR_PRIMARY_NAVY&#39;</span></span>
<span class="line"><span style="color:#F97583;">  |</span><span style="color:#9ECBFF;"> &#39;GT_COLOR_SECONDARY_BLUE&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#B392F0;"> getGTColor</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> GTColorKey</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#79B8FF;"> GT_COLORS</span><span style="color:#E1E4E8;">[key];</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="component-props" tabindex="-1">Component Props <a class="header-anchor" href="#component-props" aria-label="Permalink to &quot;Component Props&quot;">​</a></h3><p>All components have comprehensive TypeScript interfaces:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> ButtonProps</span></span>
<span class="line"><span style="color:#F97583;">  extends</span><span style="color:#B392F0;"> React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ButtonHTMLAttributes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HTMLButtonElement</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">  children</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ReactNode</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  variant</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ButtonVariant</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  size</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ButtonSize</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Union types for strict prop validation</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> ButtonVariant</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;primary&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;secondary&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;outline&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> ButtonSize</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;sm&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;md&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;lg&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="testing-strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#testing-strategy" aria-label="Permalink to &quot;Testing Strategy&quot;">​</a></h2><h3 id="unit-testing" tabindex="-1">Unit Testing <a class="header-anchor" href="#unit-testing" aria-label="Permalink to &quot;Unit Testing&quot;">​</a></h3><p><strong>Vitest + Testing Library:</strong></p><ul><li>Component behavior testing</li><li>Accessibility compliance</li><li>Props validation</li><li>Event handling</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Button renders with correct variant styles&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#B392F0;">Button</span><span style="color:#B392F0;"> variant</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;primary&quot;</span><span style="color:#E1E4E8;">&gt;Test</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">Button</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> button</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> screen.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(button).</span><span style="color:#B392F0;">toHaveClass</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button--primary&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="visual-regression-testing" tabindex="-1">Visual Regression Testing <a class="header-anchor" href="#visual-regression-testing" aria-label="Permalink to &quot;Visual Regression Testing&quot;">​</a></h3><p><strong>Storybook + Chromatic:</strong></p><ul><li>Automated visual testing</li><li>Cross-browser compatibility</li><li>Responsive design validation</li><li>Component state coverage</li></ul><h3 id="integration-testing" tabindex="-1">Integration Testing <a class="header-anchor" href="#integration-testing" aria-label="Permalink to &quot;Integration Testing&quot;">​</a></h3><p><strong>Cypress (Future):</strong></p><ul><li>End-to-end workflows</li><li>Real browser testing</li><li>Accessibility auditing</li><li>Performance monitoring</li></ul><h2 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">​</a></h2><h3 id="bundle-optimization" tabindex="-1">Bundle Optimization <a class="header-anchor" href="#bundle-optimization" aria-label="Permalink to &quot;Bundle Optimization&quot;">​</a></h3><ul><li><strong>Tree Shaking</strong>: Components can be imported individually</li><li><strong>Code Splitting</strong>: Lazy loading for non-critical components</li><li><strong>Bundle Analysis</strong>: Regular monitoring of package sizes</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Tree-shakeable imports</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@gtalumni-la/react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Not: import * as GTDesign from &#39;@gtalumni-la/react&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="runtime-performance" tabindex="-1">Runtime Performance <a class="header-anchor" href="#runtime-performance" aria-label="Permalink to &quot;Runtime Performance&quot;">​</a></h3><ul><li><strong>Minimal Re-renders</strong>: Optimized component updates</li><li><strong>CSS-in-CSS</strong>: No runtime style computation</li><li><strong>Lazy Loading</strong>: Deferred loading of heavy components</li></ul><h3 id="build-performance" tabindex="-1">Build Performance <a class="header-anchor" href="#build-performance" aria-label="Permalink to &quot;Build Performance&quot;">​</a></h3><ul><li><strong>Turborepo Caching</strong>: Aggressive caching strategy</li><li><strong>Parallel Builds</strong>: Independent package building</li><li><strong>Incremental Builds</strong>: Only rebuild changed packages</li></ul><h2 id="accessibility-architecture" tabindex="-1">Accessibility Architecture <a class="header-anchor" href="#accessibility-architecture" aria-label="Permalink to &quot;Accessibility Architecture&quot;">​</a></h2><h3 id="wcag-2-1-aa-compliance" tabindex="-1">WCAG 2.1 AA Compliance <a class="header-anchor" href="#wcag-2-1-aa-compliance" aria-label="Permalink to &quot;WCAG 2.1 AA Compliance&quot;">​</a></h3><p>All components meet accessibility standards:</p><ul><li><strong>Semantic HTML</strong>: Proper element usage</li><li><strong>ARIA Support</strong>: Comprehensive labeling</li><li><strong>Keyboard Navigation</strong>: Full keyboard operability</li><li><strong>Screen Reader</strong>: Compatible with assistive technology</li></ul><h3 id="testing-integration" tabindex="-1">Testing Integration <a class="header-anchor" href="#testing-integration" aria-label="Permalink to &quot;Testing Integration&quot;">​</a></h3><p>Accessibility testing is built into the development workflow:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Automated a11y testing</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Button is accessible&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">container</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#B392F0;">Button</span><span style="color:#E1E4E8;">&gt;Test</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">Button</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> results</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> axe</span><span style="color:#E1E4E8;">(container)</span></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(results).</span><span style="color:#B392F0;">toHaveNoViolations</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="documentation-architecture" tabindex="-1">Documentation Architecture <a class="header-anchor" href="#documentation-architecture" aria-label="Permalink to &quot;Documentation Architecture&quot;">​</a></h2><h3 id="vitepress-setup" tabindex="-1">VitePress Setup <a class="header-anchor" href="#vitepress-setup" aria-label="Permalink to &quot;VitePress Setup&quot;">​</a></h3><p>Static site generation with:</p><ul><li><strong>Markdown-based</strong>: Easy content authoring</li><li><strong>Vue Components</strong>: Interactive examples</li><li><strong>Version Management</strong>: Support for multiple versions</li><li><strong>GitHub Pages</strong>: Automated deployment</li></ul><h3 id="component-documentation" tabindex="-1">Component Documentation <a class="header-anchor" href="#component-documentation" aria-label="Permalink to &quot;Component Documentation&quot;">​</a></h3><p>Each component includes:</p><ul><li><strong>API Reference</strong>: Complete prop documentation</li><li><strong>Usage Examples</strong>: Practical implementation patterns</li><li><strong>Accessibility Notes</strong>: WCAG compliance details</li><li><strong>Design Guidelines</strong>: When and how to use</li></ul><h2 id="ci-cd-pipeline" tabindex="-1">CI/CD Pipeline <a class="header-anchor" href="#ci-cd-pipeline" aria-label="Permalink to &quot;CI/CD Pipeline&quot;">​</a></h2><h3 id="github-actions-workflow" tabindex="-1">GitHub Actions Workflow <a class="header-anchor" href="#github-actions-workflow" aria-label="Permalink to &quot;GitHub Actions Workflow&quot;">​</a></h3><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#85E89D;">jobs</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">  test</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">    runs-on</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="color:#85E89D;">    steps</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Install &amp; Test</span></span>
<span class="line"><span style="color:#85E89D;">        run</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#9ECBFF;">          pnpm install</span></span>
<span class="line"><span style="color:#9ECBFF;">          pnpm test</span></span>
<span class="line"><span style="color:#9ECBFF;">          pnpm build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>Pipeline Stages:</strong></p><ol><li><strong>Lint &amp; Type Check</strong>: Code quality validation</li><li><strong>Unit Tests</strong>: Component functionality testing</li><li><strong>Build</strong>: Package compilation and bundling</li><li><strong>Visual Tests</strong>: Storybook visual regression</li><li><strong>Deploy</strong>: Documentation and Storybook deployment</li></ol><h3 id="release-management" tabindex="-1">Release Management <a class="header-anchor" href="#release-management" aria-label="Permalink to &quot;Release Management&quot;">​</a></h3><p><strong>Changesets</strong> for version management:</p><ul><li>Semantic versioning</li><li>Automated changelog generation</li><li>NPM publishing automation</li><li>GitHub release creation</li></ul><h2 id="security-considerations" tabindex="-1">Security Considerations <a class="header-anchor" href="#security-considerations" aria-label="Permalink to &quot;Security Considerations&quot;">​</a></h2><h3 id="dependency-management" tabindex="-1">Dependency Management <a class="header-anchor" href="#dependency-management" aria-label="Permalink to &quot;Dependency Management&quot;">​</a></h3><ul><li><strong>Audit</strong>: Regular dependency vulnerability scanning</li><li><strong>Updates</strong>: Automated dependency updates via Dependabot</li><li><strong>Minimal Dependencies</strong>: Keep external dependencies minimal</li></ul><h3 id="build-security" tabindex="-1">Build Security <a class="header-anchor" href="#build-security" aria-label="Permalink to &quot;Build Security&quot;">​</a></h3><ul><li><strong>Supply Chain</strong>: Verify package integrity</li><li><strong>Permissions</strong>: Minimal required permissions</li><li><strong>Secrets</strong>: Secure handling of API keys and tokens</li></ul><h2 id="future-architecture" tabindex="-1">Future Architecture <a class="header-anchor" href="#future-architecture" aria-label="Permalink to &quot;Future Architecture&quot;">​</a></h2><h3 id="planned-improvements" tabindex="-1">Planned Improvements <a class="header-anchor" href="#planned-improvements" aria-label="Permalink to &quot;Planned Improvements&quot;">​</a></h3><ul><li><strong>Web Components</strong>: Framework-agnostic components</li><li><strong>CSS Variables</strong>: Enhanced theming capabilities</li><li><strong>Performance Monitoring</strong>: Real-time performance tracking</li><li><strong>Multi-Framework</strong>: Support for Vue, Angular, Svelte</li></ul><h3 id="scalability-considerations" tabindex="-1">Scalability Considerations <a class="header-anchor" href="#scalability-considerations" aria-label="Permalink to &quot;Scalability Considerations&quot;">​</a></h3><ul><li><strong>Micro-frontends</strong>: Support for distributed teams</li><li><strong>Plugin Architecture</strong>: Extensible component system</li><li><strong>Theme Engine</strong>: Advanced customization capabilities</li><li><strong>Internationalization</strong>: Multi-language support</li></ul><h2 id="development-workflow" tabindex="-1">Development Workflow <a class="header-anchor" href="#development-workflow" aria-label="Permalink to &quot;Development Workflow&quot;">​</a></h2><h3 id="local-development" tabindex="-1">Local Development <a class="header-anchor" href="#local-development" aria-label="Permalink to &quot;Local Development&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># Install dependencies</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Start development</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#9ECBFF;"> dev</span><span style="color:#6A737D;">          # All packages in watch mode</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#9ECBFF;"> storybook</span><span style="color:#6A737D;">    # Component playground</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#9ECBFF;"> docs:dev</span><span style="color:#6A737D;">     # Documentation site</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Testing</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#9ECBFF;"> test</span><span style="color:#6A737D;">         # Run all tests</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#9ECBFF;"> test:watch</span><span style="color:#6A737D;">   # Watch mode testing</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#9ECBFF;"> test:coverage</span><span style="color:#6A737D;"> # Coverage reporting</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="contributing-process" tabindex="-1">Contributing Process <a class="header-anchor" href="#contributing-process" aria-label="Permalink to &quot;Contributing Process&quot;">​</a></h3><ol><li><strong>Issue Creation</strong>: Bug reports or feature requests</li><li><strong>Branch Creation</strong>: Feature or fix branches</li><li><strong>Development</strong>: Local development with testing</li><li><strong>PR Creation</strong>: Pull request with description</li><li><strong>Review Process</strong>: Code review and CI checks</li><li><strong>Merge</strong>: Automated testing and deployment</li></ol><p>This architecture provides a solid foundation for scaling the design system while maintaining quality, performance, and developer experience.</p>`,104)]))}const m=n(o,[["render",p]]);export{b as __pageData,m as default};
