import{_ as s,c as a,o as e,ag as l}from"./chunks/framework.CPSlWV_k.js";const m=JSON.parse('{"title":"Components","description":"","frontmatter":{},"headers":[],"relativePath":"components/index.md","filePath":"components/index.md","lastUpdated":1757553280000}'),t={name:"components/index.md"};function o(p,n,r,i,c,d){return e(),a("div",null,n[0]||(n[0]=[l(`<h1 id="components" tabindex="-1">Components <a class="header-anchor" href="#components" aria-label="Permalink to &quot;Components&quot;">​</a></h1><p>The GT Design System provides a comprehensive set of React components designed to follow Georgia Tech brand guidelines and provide consistent user experiences.</p><h2 id="available-components" tabindex="-1">Available Components <a class="header-anchor" href="#available-components" aria-label="Permalink to &quot;Available Components&quot;">​</a></h2><h3 id="form-input-components" tabindex="-1">Form &amp; Input Components <a class="header-anchor" href="#form-input-components" aria-label="Permalink to &quot;Form &amp; Input Components&quot;">​</a></h3><ul><li><a href="./button.html"><strong>Button</strong></a> - Primary interactive element with multiple variants and sizes</li></ul><h3 id="layout-components" tabindex="-1">Layout Components <a class="header-anchor" href="#layout-components" aria-label="Permalink to &quot;Layout Components&quot;">​</a></h3><ul><li><strong>Card</strong> - Content containers <em>(Coming Soon)</em></li><li><strong>Modal</strong> - Dialog and overlay components <em>(Coming Soon)</em></li></ul><h3 id="feedback-components" tabindex="-1">Feedback Components <a class="header-anchor" href="#feedback-components" aria-label="Permalink to &quot;Feedback Components&quot;">​</a></h3><ul><li><strong>Alert</strong> - User notifications and status messages <em>(Coming Soon)</em></li></ul><h3 id="typography-components" tabindex="-1">Typography Components <a class="header-anchor" href="#typography-components" aria-label="Permalink to &quot;Typography Components&quot;">​</a></h3><ul><li><strong>Typography</strong> - Text and heading components <em>(Coming Soon)</em></li></ul><h2 id="component-principles" tabindex="-1">Component Principles <a class="header-anchor" href="#component-principles" aria-label="Permalink to &quot;Component Principles&quot;">​</a></h2><h3 id="accessibility-first" tabindex="-1">Accessibility First <a class="header-anchor" href="#accessibility-first" aria-label="Permalink to &quot;Accessibility First&quot;">​</a></h3><p>All components are built with accessibility in mind:</p><ul><li>WCAG 2.1 AA compliance</li><li>Proper ARIA attributes</li><li>Keyboard navigation support</li><li>Screen reader compatibility</li></ul><h3 id="typescript-support" tabindex="-1">TypeScript Support <a class="header-anchor" href="#typescript-support" aria-label="Permalink to &quot;TypeScript Support&quot;">​</a></h3><p>Every component includes comprehensive TypeScript definitions:</p><ul><li>Strongly typed props</li><li>IntelliSense support</li><li>Runtime type validation</li><li>Generic type support where applicable</li></ul><h3 id="consistent-api" tabindex="-1">Consistent API <a class="header-anchor" href="#consistent-api" aria-label="Permalink to &quot;Consistent API&quot;">​</a></h3><p>Components follow consistent patterns:</p><ul><li>Standard prop naming conventions</li><li>Predictable size and variant patterns</li><li>Consistent event handling</li><li>Uniform styling approaches</li></ul><h3 id="themeable" tabindex="-1">Themeable <a class="header-anchor" href="#themeable" aria-label="Permalink to &quot;Themeable&quot;">​</a></h3><p>Components use design tokens for easy customization:</p><ul><li>CSS custom properties integration</li><li>Theme-aware color schemes</li><li>Responsive design patterns</li><li>Brand compliance built-in</li></ul><h2 id="usage-patterns" tabindex="-1">Usage Patterns <a class="header-anchor" href="#usage-patterns" aria-label="Permalink to &quot;Usage Patterns&quot;">​</a></h2><h3 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage&quot;">​</a></h3><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@gtalumni-la/react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> MyComponent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Button</span><span style="color:#B392F0;"> variant</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;primary&quot;</span><span style="color:#B392F0;"> size</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;lg&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Click me</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="with-event-handlers" tabindex="-1">With Event Handlers <a class="header-anchor" href="#with-event-handlers" aria-label="Permalink to &quot;With Event Handlers&quot;">​</a></h3><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@gtalumni-la/react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> MyComponent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#B392F0;"> handleClick</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Button clicked!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Button</span><span style="color:#B392F0;"> variant</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;primary&quot;</span><span style="color:#B392F0;"> onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{handleClick} </span><span style="color:#B392F0;">disabled</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Interactive Button</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="custom-styling" tabindex="-1">Custom Styling <a class="header-anchor" href="#custom-styling" aria-label="Permalink to &quot;Custom Styling&quot;">​</a></h3><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@gtalumni-la/react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> MyComponent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Button</span></span>
<span class="line"><span style="color:#B392F0;">      variant</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;primary&quot;</span></span>
<span class="line"><span style="color:#B392F0;">      style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{ marginTop: </span><span style="color:#9ECBFF;">&#39;16px&#39;</span><span style="color:#E1E4E8;"> }}</span></span>
<span class="line"><span style="color:#B392F0;">      className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;my-custom-button&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Custom Styled Button</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="component-status" tabindex="-1">Component Status <a class="header-anchor" href="#component-status" aria-label="Permalink to &quot;Component Status&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Component</th><th>Status</th><th>Documentation</th><th>Tests</th></tr></thead><tbody><tr><td>Button</td><td>✅ Stable</td><td>✅ Complete</td><td>✅ Complete</td></tr><tr><td>Input</td><td>🚧 In Progress</td><td>⏳ Planned</td><td>⏳ Planned</td></tr><tr><td>Card</td><td>⏳ Planned</td><td>⏳ Planned</td><td>⏳ Planned</td></tr><tr><td>Modal</td><td>⏳ Planned</td><td>⏳ Planned</td><td>⏳ Planned</td></tr><tr><td>Alert</td><td>⏳ Planned</td><td>⏳ Planned</td><td>⏳ Planned</td></tr><tr><td>Typography</td><td>⏳ Planned</td><td>⏳ Planned</td><td>⏳ Planned</td></tr></tbody></table><h2 id="browser-testing" tabindex="-1">Browser Testing <a class="header-anchor" href="#browser-testing" aria-label="Permalink to &quot;Browser Testing&quot;">​</a></h2><p>All components are tested across supported browsers:</p><ul><li>✅ Chrome 90+</li><li>✅ Firefox 88+</li><li>✅ Safari 14+</li><li>✅ Edge 90+</li></ul><h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h2><p>Components are optimized for performance:</p><ul><li>Tree-shaking support for smaller bundles</li><li>Minimal runtime overhead</li><li>Optimized re-rendering</li><li>Lazy loading where appropriate</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="./button.html">Explore Button Component</a> - Learn about the Button component</li><li><a href="/gt-design-system/preview/pr-80/storybook/">View in Storybook</a> - Interactive component playground</li><li><a href="/gt-design-system/preview/pr-80/tokens/">Design Tokens</a> - Understand the design system foundation</li><li><a href="/gt-design-system/preview/pr-80/development/contributing.html">Contributing</a> - Help build new components</li></ul>`,41)]))}const b=s(t,[["render",o]]);export{m as __pageData,b as default};
